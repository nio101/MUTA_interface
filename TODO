TODO

BUG:Gérer proprement les signed/unsigned!
En attendant, on considère les °C comme signed... :s
=> ajouter un bit signed/unsigned pour faire le complément si signed lors du décodage

BUG muta units : quand uptime >= 1j, pas d'unité affichée?
unit_type: 0 (pas d'unité) ou bien 7 (days) ?
vérifier côté units & côté code operator/script python
=> fait planter l'export vers influxdb!

BUG des capteurs de température I2C, ou bien de l'interprétation?
Quand proche de 0, valeur de 255.X !?!
0 == 0
-0.1 == 255.9
-1 == 255
si > 128: t = t - 256

FEAT: ajouter une version de protocole MUTA/de soft pour s'assurer que seuls les clients à la même version que l'opérateur seront acceptés
=> modifier UUID pour encoder la version
et n'accepter que les units qui sont avec une version similaire à celle de l'opérateur!

FEAT: Encoder la puissance en dixièmes de mW
=> plus de soucis de lecture, et courbes/monitoring faciles à faire...
=> modifier MUTApack pour ajouter unit "mW" & encoder en fixed16/mW avec regexp correspondant

UPDATE1 (MUTA v01): passer l'encoding/decoding type sur 2 bits, récupérer un bit pour signed/unsigned, et ajouter le bit qui ne sert pas (à 0) pour augmenter
la liste des units et ajouter mW, puis:
- encoder la température en signed
- encode l'uptime directement en fixed point de jours
- encoder la puissance en fixed point de mW
- coder le modèle/make sur 1 octet + 1 octet pour la version de MUTA/Tinypack

------------------------------

FEAT: Prévoir des cycles plus longs pour les scouts quand ils se réveillent et n'arrivent pas à dialoguer avec l'operateur
Ex. d'une coupure de courant d'1h => il ne faut pas que les scouts vident leur batteries à ré-essayer en permanence...
=> faire un essai toutes les 10mn, par exemple!
Parce qu'on a quand même un scan complet à 20mW à chaque fois...

BUG operator:
quand on lui demande une MAJ de UpF, il renvoie aussi la valeur de Pwr!?!

FEAT: verifier que les logs d'operator soient bien tournants, et le faire sinon

FEAT: ajouter un tableau de valeurs de bias par couples unit_id / variable
=> permet de corriger / uniformiser les valeurs de température
=> les mettres côte à côte et jouer sur les valeurs pour qu'ils remontent tous la même température...

BUG: Quand/si le script python tombe/crashe, l'opérateur continue sa vie et discute avec les nodes?
Apparemment...
Mais pas d'ack aux messages d'UPDATE => au bout de X essais, reset des nodes? et comme pas de script python, plus possible de se reconnecter?
=> tourne en boucle à recherche réseau?
=> tester & vérifier dans le code
Que fait l'opérateur quand pas d'ack à ses updates?
Il devrait se mettre en restart? y réfléchir...

FEAT: utiliser une variable qui compte le nombre de retry depuis le lancement, pas un pourcentage ridicule...
& ajouter que si le nombre de retry est > valeur limite : faire un RESET == power_level + RAZ compteurs
ou alors tous les X retry, on refait un power_level test...

FEAT: ajouter une commande permettant de demander un RESET par le réseau...
exemple: installation d'un relais ou bien changement de conf réseau => RESET!

tester les cas de décrochage / raccrochage
exemple: on relance l'opérateur...
Est-ce que les scouts connectés se reconnectent bien tout seul?

Idem avec un relais...
problème: apparemment, un scout connecté au relais arrivera à discuter directemnt avec la tête de pont! et faire un network register... tout en gardant son adresse sous le relais!?!
Comment est-ce possible?
message non chiffré? mauvais firmware?
=> vérifier et tester

+ disable power_level_dynamic_adaptation for operators (pour les relais?)...
Par définition, ils doivent pouvoir émettre à forte puissance sans tenir compte de leur connection à la tête de pont (pour les relais).

revoir la procédure quand on relance l'opérater avec une chaine: relais+scout
que se passe-t-il quand le relais essaye d'envoyer un message?
Idem si c'est le scout qui le fait avant?

L'idéal est que le relais soit réattaché immédiatement, et que le scout attende le prochain update pour se réattacher et donc retomber sur le relais...
